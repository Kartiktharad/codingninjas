Given a random integer array A and a number x. Find and print the pair of elements in the array which sum to x.
Array A can contain duplicate elements.
While printing a pair, print the smaller element first.
That is, if a valid pair is (6, 5) print "5 6". There is no constraint that out of 5 pairs which have to be printed in 1st line. You can print pairs in any order, just be careful about the order of elements in a pair.
Input format :
Line 1 : Integer N (Array size)
Line 2 : Array elements (separated by space)
Line 3 : Integer x
Output format :
Line 1 : Pair 1 elements (separated by space)
Line 2 : Pair 2 elements (separated by space)
Line 3 : and so on
Constraints :
1 <= N <= 1000
1 <= x <= 100
Sample Input:
9
1 3 6 2 5 4 3 2 4
7
Sample Output :
1 6
3 4
3 4
2 5
2 5
3 4
3 4



#include <iostream>
using namespace std;
#include "solution.h"

int main() {

	int size;
	int x;

	cin>>size;
	int *input=new int[1+size];

	for(int i=0;i<size;i++)
		cin>>input[i];
	cin>>x;
	pairSum(input,size,x);

	return 0;
}
#include<algorithm>
void pairSum(int input[], int size, int x) {
    /* Don't write main().
     * Don't read input, it is passed as function argument.
     * Print the output and don't return it.
     * Taking input is handled automatically.
     */
sort(input,input+size);
    int start=0;
    int end=size-1;
    while(start<end){
        if(input[start]+input[end]==x)
        {
            if(input[start]==input[end]){
            int count=end-start+1;
            int n=count-1;
            int totalcount=((n)*(n+1))/2;
            while(totalcount>0)
            {
                cout<<input[start]<<" "<<input[end]<<endl;
                totalcount--;
            }
            start=end;
        }
    else
    {
        int countstart=0,countend=0;
        int temp=input[start],i=start;
        while(input[i]==temp && i<end)
        {
            i++;
            countstart++;
        }
        temp=input[end];
        int j=end;
        while(input[j]==temp && j>start)
        {
            j--;
            countend++;
        }
        start=i;
        end=j;
        int totaltimes=countstart*countend;
        while(totaltimes>0)
        {
            cout<<input[start-1]<<' '<<input[end+1]<<endl;
            totaltimes--;

        }
    }

}
    else if(input[start]+input[end]<x)
        start++;
    else
        end--;
}
}
