Given an undirected graph G(V,E), check if the graph G is connected graph or not.
V is the number of vertices present in graph G and vertices are numbered from 0 to V-1.
E is the number of edges present in graph G.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next 'E' lines, each have two space-separated integers, 'a' and 'b', denoting that there exists an edge between Vertex 'a' and Vertex 'b'.
Output Format :
"true" or "false"
Constraints :
2 <= V <= 1000
1 <= E <= 1000
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
true
Sample Input 2:
4 3
0 1
1 3
0 3
Sample Output 2:
false
Sample Output 2 Explanation
The graph is not connected, even though vertices 0,1 and 3 are connected to each other but there isnâ€™t any path from vertices 0,1,3 to vertex 2.



#include <iostream>
#include<queue>
using namespace std;


void print(int **graph, int V, bool *visited, int sv)
{
    queue<int> q;
    int flag = 0;
    q.push(sv);
    visited[sv] = true;
    while( !q.empty() )
    {
        for (int i=0; i<V; i++)
        {
            if (graph[q.front()][i] == 1)
            {
                if (visited[i] == true)
                    continue;
                else
                {
                    q.push(i);
                    visited[i] = true;
                }
            }
        }
        q.pop();
    }
    for (int i=0; i<V; i++)
    {
        if (visited[i] == false)
        {
            flag = 1;
            cout<<"false";
            break;
        }
    }
    if (flag == 0)
        cout<<"true";
}

int main() {
    int V, E;
    cin >> V >> E;

  /*

  	   Write Your Code Here
	   Complete the Rest of the Program
	   You have to take input and print the output yourself

  */
 bool *visited = new bool[V];        //to marks the visited vertices
    for (int i=0; i<V; i++)
    {
        visited[i] = false;
    }

    int **graph = new int*[V];            //Adjacency matrix
    for (int i=0; i<V; i++)
    {
        graph[i] = new int[V];
    }
    for (int i=0; i<V; i++)            //Initialing adjacency matrix to 0
    {
        for (int j=0; j<V; j++)
            graph[i][j] = 0;
    }

    for (int i=0; i<E; i++)
    {
        int f,s;
        cin>>f>>s;
        graph[f][s] = 1;
        graph[s][f] = 1;
    }

    print(graph, V, visited, 0);         //printing in BFS manner using queue

    delete[] visited;                        //deleting visited array
    for(int i=0; i<V; i++)
    {
        delete[] graph[i];                //deleting 2D adjacency matrix
    }
    delete[] graph;
  return 0;
}
