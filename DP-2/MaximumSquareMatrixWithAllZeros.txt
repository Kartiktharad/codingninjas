Given a n*m matrix which contains only 0s and 1s, find out the size of maximum square sub-matrix with all 0s. You need to return the size of square with all 0s.
Input format :
Line 1 : n and m (space separated positive integers)
Next n lines : m elements of each row (separated by space).
Output Format:
Line 1 : Size of maximum square sub-matrix
Sample Input :
3 3
1 1 0
1 1 1
1 1 1
Sample Output :
1



#include<algorithm>
using namespace std;
int findMaxSquareWithAllZeros(int** arr, int row, int col){

    /* Don't write main().
     *  Don't read input, it is passed as function argument.
     *  Return output and don't print it.
     *  Taking input and printing output is handled automatically.
     */
    int **S = new int*[row];
    for (int i=0; i<row; i++)
    {
        S[i] = new int[col];
    }
    for (int i=0; i< row; i++)
    {
        if (arr[i][0] == 0)
            S[i][0] = 1;
        else
            S[i][0] = 0;
    }

    for (int i=0; i< col; i++)
    {
        if (arr[0][i] == 0)
            S[0][i] = 1;
        else
            S[0][i] = 0;
    }

    for (int i=1; i < row; i++)
    {
        for (int j=1; j< col; j++)
        {
            if (arr[i][j] == 0)
                S[i][j] = min(S[i-1][j], min(S[i][j-1], S[i-1][j-1])) + 1;
            else
                S[i][j] = 0;
        }
    }

    int max_data = S[0][0];
    for (int i=0; i<row; i++)
    {
        for (int j=0; j<col; j++)
        {
            if (max_data < S[i][j])
            {
                max_data = S[i][j];
            }
        }
    }
    delete []S;
    return max_data;


}



#include<iostream>
#include"solution.h"
using namespace std;
int main()
 {
  int **arr,n,m,i,j;
  cin>>n>>m;
  arr=new int*[n];
  for(i=0;i<n;i++)
      {
       arr[i]=new int[m];
      }
  for(i=0;i<n;i++)
     {
      for(j=0;j<m;j++)
	    {
	     cin>>arr[i][j];
	    }
     }
  cout << findMaxSquareWithAllZeros(arr,n,m) << endl;
  delete arr;
  return 0;
}
