Given an integer matrix of size m*n, you need to find out the value of minimum cost to reach from the cell (0, 0) to (m-1, n-1).
From a cell (i, j), you can move in three directions : (i+1, j), (i, j+1) and (i+1, j+1).
Cost of a path is defined as the sum of values of each cell through which path passes.
Input Format :
Line 1 : Two integers, m and n
Next m lines : n integers of each row (separated by space)
Output Format :
Minimum cost
Constraints :
1 <= m, n <= 20
Sample Input 1 :
3 4
3 4 1 2
2 1 8 9
4 7 8 1
Sample Output 1 :
13



#include <iostream>
#include <vector>
#include <climits>
using namespace std;

int minCostPath(int **input, int m, int n) {
    /* Don't write main().
     * Don't read input, it is passed as function argument.
     * Return output and don't print it.
     * Taking input and printing output is handled automatically.
     */
      int **output = new int*[m];
    for(int i =0;i<m;i++){
        output[i]= new int[n];
    }

    output[m-1][n-1]=input[m-1][n-1];
    for(int j=n-2;j>=0;j--){
        output[m-1][j]=input[m-1][j]+output[m-1][j+1];
    }
    for(int i=m-2;i>=0;i--){
        output[i][n-1] = output[i+1][n-1] + input[i][n-1];
    }
    for(int i=m-2;i>=0;i--){
        for(int j=n-2;j>=0;j--){
            output[i][j]=min(output[i][j+1],min(output[i+1][j+1],output[i+1][j]))+input[i][j];
        }
    }
    return output[0][0];
}


#include "solution.h"

int main() {
    int **arr,n,m;
    cin >> n >> m;
    arr = new int*[n];
    for(int i = 0; i < n; i++) {
        arr[i] = new int[m];
    }
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cin >> arr[i][j];
        }
    }
    cout << minCostPath(arr, n, m) << endl;
}








//Brute Force



using namespace std;
int minCostPath(int **input, int m, int n, int i, int j)

{

// Base case
if(i == m- 1 && j == n- 1)
{ return input[i][j]; }

 if(i >= m || j >= n)

 { return INT_MAX; }

 // Recursive calls
 int x = minCostPath(input, m, n, i, j+1);
  int y = minCostPath(input, m, n, i+1, j+1);
   int z = minCostPath(input, m, n, i+1, j);

   // Small Calculation

    int ans = min(x, min(y, z)) + input[i][j]; return ans;
}


int minCostPath(int **input, int m, int n)
{

return minCostPath(input, m, n, 0, 0);
}


int main()
{ int m, n;
cin >> m >> n;
int **input = new int*[m];
 for(int i = 0; i < m; i++)
  { input[i] = new int[n];
  for(int j = 0; j < n; j++)
  { cin >> input[i][j];
  }
   }
    cout << minCostPath(input, m, n) << endl;
     }





//Memoization


#include <iostream>
using namespace std;
#include <climits>

int minCostPath_Mem(int **input, int m, int n, int i, int j, int **output) {
    if(i == m- 1 && j == n- 1) {
        return input[i][j];
    }

    if(i >= m || j >= n) {
        return INT_MAX;
    }

    // Check if ans already exists
    if(output[i][j] != -1) {
        return output[i][j];
    }

    // Recursive calls
    int x = minCostPath_Mem(input, m, n, i, j+1, output);
    int y = minCostPath_Mem(input, m, n, i+1, j+1, output);
    int z = minCostPath_Mem(input, m, n, i+1, j, output);

    // Small Calculation
    int a = min(x, min(y, z)) + input[i][j];

    // Save the answer for future use
    output[i][j] = a;

    return a;
}

int minCostPath_Mem(int **input, int m, int n, int i, int j) {
    int **output = new int*[m];
    for(int i = 0; i < m; i++) {
        output[i] = new int[n];
        for(int j = 0; j < n; j++) {
            output[i][j] = -1;
        }
    }

    return minCostPath_Mem(input, m, n, i, j, output);
}

int minCostPath(int **input, int m, int n, int i, int j) {
    // Base case
    if(i == m- 1 && j == n- 1) {
        return input[i][j];
    }

    if(i >= m || j >= n) {
        return INT_MAX;
    }

    // Recursive calls
    int x = minCostPath(input, m, n, i, j+1);
    int y = minCostPath(input, m, n, i+1, j+1);
    int z = minCostPath(input, m, n, i+1, j);

    // Small Calculation
    int ans = min(x, min(y, z)) + input[i][j];
    return ans;
}

int minCostPath(int **input, int m, int n) {
    return minCostPath(input, m, n, 0, 0);
}

int main() {
    int m, n;
    cin >> m >> n;
    int **input = new int*[m];
    for(int i = 0; i < m; i++) {
        input[i] = new int[n];
        for(int j = 0; j < n; j++) {
            cin >> input[i][j];
        }
    }
    cout << minCostPath_Mem(input, m, n, 0, 0) << endl;
    cout << minCostPath(input, m, n) << endl;
}
