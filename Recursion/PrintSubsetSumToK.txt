Given an array A and an integer K, print all subsets of A which sum to K.
Subsets are of length varying from 0 to n, that contain elements of the array. But the order of elements should remain same as in the input array.
Note : The order of subsets are not important. Just print them in different lines.
Input format :
Line 1 : Size of input array
Line 2 : Array elements separated by space
Line 3 : K
Sample Input:
9
5 12 3 17 1 18 15 3 17
6
Sample Output:
3 3
5 1


#include <iostream>
using namespace std;
#include "solution.h"

int main() {
  int input[1000],length,k;
  cin >> length;
  for(int i=0; i < length; i++)
    cin >> input[i];
  cin>>k;
  printSubsetSumToK(input, length,k);
}

void subsetSumToK(int input[],int n,int output[1000], int opSize, int k)
{
    if(n==0)
    {
        if(k==0)
        {
            for(int i=0;i<opSize;i++)
            {
                cout<<output[i]<<" ";
            }
            cout<<endl;
            return;
        }
        else
            return ;
    }
    int smallOutput1[1000],smallOutput2[1000];
    for(int i=0;i<opSize;i++)
    {
        smallOutput1[i]=output[i];
        smallOutput2[i]=output[i];

    }
    smallOutput2[opSize]=input[0];

    subsetSumToK(input+1,n-1,smallOutput1,opSize,k);
    subsetSumToK(input+1,n-1,smallOutput2,opSize+1,k-input[0]);


}
void printSubsetSumToK(int input[], int size, int k) {
    // Write your code here
    int output[1000]={0};
    subsetSumToK(input,size,output,0,k);
}
