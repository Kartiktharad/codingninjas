Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the Minimum Spanning Tree (MST) using Prim's algorithm.
For printing MST follow the steps -
1. In one line, print an edge which is part of MST in the format -
v1 v2 w
where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. And v1 <= v2 i.e. print the smaller vertex first while printing an edge.
2. Print V-1 edges in above format in different lines.
Note : Order of different edges doesn't matter.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)
Output Format :
MST
Constraints :
2 <= V, E <= 10^5
Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 1 :
0 1 3
1 2 1
0 3 5


#include <iostream>
#include<climits>
using namespace std;

int findMinVertex(int* weights, bool* visited, int V)
{
    int minVertex = -1;
    for (int i=0; i < V; i++)
    {
        if (!visited[i] && (minVertex == -1 || weights[i] < weights[minVertex]))
            minVertex = i;
    }
    return minVertex;
}

void prim(int** graph, int V)
{
    bool* visited = new bool[V];
    int* weights = new int[V];
    int* parent = new int[V];
    for (int i=0; i<V; i++)
    {
        visited[i] = false;
        weights[i] = INT_MAX;
    }
    parent[0] = -1;
    weights[0] = 0;

    for(int i=0; i<V; i++)
    {
        int minVertex = findMinVertex(weights, visited, V);
        visited[minVertex] = true;
        for(int j=0; j < V; j++)
        {
            if ( graph[minVertex][j] != 0 && !visited[j] )
            {
                if ( graph[minVertex][j] < weights[j])
                {
                    weights[j] = graph[minVertex][j];
                    parent[j] = minVertex;
                }
            }
        }
    }
    for (int i=1; i< V; i++)
    {
        if (parent[i] < i)
            cout<<parent[i]<<" "<<i<<" "<<weights[i]<<endl;
        else
            cout<<i<<" "<<parent[i]<<" "<<weights[i]<<endl;
    }
    delete[] visited;
    delete[] weights;
    delete[] parent;

}


int main()
{
  int V, E, tempX, tempY;
  cin >> V >> E;

  /*

  	   Write Your Code Here
	   Complete the Rest of the Program
	   You have to Print the output yourself

  */
int** graph = new int*[V];
    for (int i=0; i<V; i++)
    {
        graph[i] = new int[V];
        for (int j=0; j<V; j++)
        {
            graph[i][j] = 0;
        }
    }
    for (int i=0; i<E; i++)
    {
        int v1,v2,w;
        cin>>v1>>v2>>w;
        graph[v1][v2] = w;
        graph[v2][v1] = w;
    }

    prim(graph, V);

    for (int i=0; i<V; i++)
    {
        delete[] graph[i];
    }
    delete[] graph;
    return 0;
  return 0;
}
