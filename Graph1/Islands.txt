An island is a small piece of land surrounded by water . A group of islands is said to be connected if we can reach from any given island to any other island in the same group . Given N islands (numbered from 1 to N) and two lists of size M (u and v) denoting island u[i] is connected to island v[i] and vice versa . Can you count the number of connected groups of islands.
Constraints :
1<=N<=100
1<=M<=(N*(N-1))/2
1<=u[i],v[i]<=N
Input Format :
Line 1 : Two integers N and M
Line 2 : List u of size of M
Line 3 : List v of size of M
Output Return Format :
The count the number of connected groups of islands
Sample Input :
2 1
1
2
Sample Output :
1



#include<queue>
int count(int **graph, int V, bool *visited, int sv)
{
    queue<int> q;
    int count = 0;
    while ( 1 )
    {
        q.push(sv);
        count++;
        visited[sv] = true;
        int oldstart = sv;
        while( !q.empty() )
        {
            for (int i=0; i<V; i++)
            {
                if (graph[q.front()][i] == 1)
                {
                    if (visited[i] == true)
                        continue;
                    else
                    {
                        q.push(i);
                        visited[i] = true;
                    }
                }
            }
            q.pop();
        }
        for (int i=0; i<V; i++)                //used for finding any non visited vertices,
        {                                       //this will come in play when there is disconnected graph
            if (visited[i] == false)
            {
                sv = i;
                break;
            }
        }
        if (sv == oldstart)               //if the old start doesn't change, this means graph is completely traversed
            break;
    }
    return count;
}

int solve(int n,int m,vector<int>u,vector<int>v)
{
	// Write your code here .
     int **graph = new int*[n];
    for (int i=0; i<n; i++)
    {
        graph[i] = new int[n];
    }

    for (int i=0; i<n; i++)
    {
        for(int j=0; j<n; j++)
            graph[i][j] = 0;
    }
    bool *visited = new bool[n];
    for (int i=0; i<n; i++)
        visited[i] = false;

    for (int j=0; j<m; j++)
    {
        graph[u[j]-1][v[j]-1] = 1;
        graph[v[j]-1][u[j]-1] = 1;
    }

    int c = count(graph, n, visited, 0);

    for(int i=0; i<n; i++)
    {
        delete[] graph[i];
    }
    delete[] graph;
    delete[] visited;
    return c;
}


#include<iostream>
#include<vector>
using namespace std;
#include "solution.h"

int main()
{
	int n,m;
	vector<int>u,v;
	cin>>n>>m;
	for(int i=0;i<m;i++)
	{
		int x;
		cin>>x;
		u.push_back(x);
	}
	for(int i=0;i<m;i++)
	{
		int x;
		cin>>x;
		v.push_back(x);
	}
	cout<<solve(n,m,u,v)<<endl;
}
