Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the Minimum Spanning Tree (MST) using Kruskal's algorithm.
For printing MST follow the steps -
1. In one line, print an edge which is part of MST in the format -
v1 v2 w
where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. And v1 <= v2 i.e. print the smaller vertex first while printing an edge.
2. Print V-1 edges in above format in different lines.
Note : Order of different edges doesn't matter.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)
Output Format :
MST
Constraints :
2 <= V, E <= 10^5
Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 1 :
1 2 1
0 1 3
0 3 5


#include <iostream>
#include<algorithm>
using namespace std;

class edge{
    public:
    int s;
    int d;
    int w;
};

bool comp(edge e1, edge e2)
{
    return e1.w < e2.w;
}

int findParent(int v, int* parent)
{
    if (parent[v] == v)
        return v;
    else
        return findParent(parent[v], parent);
}


int main()
{
  int V, E, tempX, tempY;
  cin >> V >> E;

  /*

  	   Write Your Code Here
	   Complete the Rest of the Program
	   You have to Print the output yourself

  */
 edge* input = new edge[E];
    for (int i=0; i<E; i++)
    {
        int s, d, w;
        cin>>s>>d>>w;
        input[i].s = s;
        input[i].d = d;
        input[i].w = w;
    }

    sort(input, input + E, comp);

    edge* output = new edge[V-1];

    int* parent = new int[V];
    for (int i=0; i< V; i++)
    {
        parent[i] = i;
    }
    int count = 0;
    int i=0;
    while ( count != V-1 )
    {
        int sourceParent = findParent(input[i].s, parent);
        int destParent = findParent(input[i].d, parent);

        if (sourceParent == destParent)
        {
            i++;
            continue;
        }
        output[count] = input[i];
        count++;
        parent[sourceParent] = destParent;
        i++;
    }

    for (int k=0; k< V-1; k++)
    {
        if (output[k].s < output[k].d)
            cout<<output[k].s<<" "<<output[k].d<<" "<<output[k].w<<endl;
        else
            cout<<output[k].d<<" "<<output[k].s<<" "<<output[k].w<<endl;
    }
    delete[] parent;
    delete[] input;
    delete[] output;

    return 0;
  return 0;
}
