Given an undirected graph G(V, E) and two vertices v1 and v2(as integers), check if there exists any path between them or not. Print true or false.
V is the number of vertices present in graph G and vertices are numbered from 0 to V-1.
E is the number of edges present in graph G.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Two integers a and b, denoting that there exists an edge between vertex a and vertex b (separated by space)
Line (E+2) : Two integers v1 and v2 (separated by space)
Output Format :
true or false
Constraints :
2 <= V <= 1000
1 <= E <= 1000
0 <= v1, v2 <= V-1
Sample Input 1 :
4 4
0 1
0 3
1 2
2 3
1 3
Sample Output 1 :
true
Sample Input 2 :
6 3
5 3
0 1
3 4
0 3
Sample Output 2 :
false



#include <iostream>
#include<queue>
using namespace std;


void has_path(int **graph, int V, bool *visited, int sv, int ev)
{
    queue<int> q;
    q.push(sv);
    visited[sv] = true;
    int flag = 0;
    while( !q.empty() )
    {
        for (int i=0; i<V; i++)
        {
            if (graph[q.front()][i] == 1)
            {
                if (visited[i] == true)
                    continue;
                else
                {
                    if(i == ev)
                    {
                        flag = 1;
                        break;
                    }
                    q.push(i);
                    visited[i] = true;
                }
            }
        }
        if(flag == 1)
            break;
        q.pop();
    }
    if (flag == 1)
        cout<<"true";
    else
        cout<<"false";

}
int main() {
    int V, E;
    cin >> V >> E;

  /*

  	   Write Your Code Here
	   Complete the Rest of the Program
	   You have to take input and print the output yourself

  */
bool *visited = new bool[V];        //to marks the visited vertices
    for (int i=0; i<V; i++)
    {
        visited[i] = false;
    }

    int **graph = new int*[V];            //Adjacency matrix
    for (int i=0; i<V; i++)
    {
        graph[i] = new int[V];
    }
    for (int i=0; i<V; i++)            //Initialing adjacency matrix to 0
    {
        for (int j=0; j<V; j++)
            graph[i][j] = 0;
    }

    for (int i=0; i<E; i++)
    {
        int f,s;
        cin>>f>>s;
        graph[f][s] = 1;
        graph[s][f] = 1;
    }
    int sv,ev;
    cin>>sv>>ev;
    has_path(graph, V, visited, sv, ev);         //printing in BFS manner using queue

    delete[] visited;                        //deleting visited array
    for(int i=0; i<V; i++)
    {
        delete[] graph[i];                //deleting 2D adjacency matrix
    }
    delete[] graph;

  return 0;
}
