You need to implement a class for Dequeue i.e. for double ended queue. In this queue, elements can be inserted and deleted from both the ends.
You don't need to double the capacity.
You need to implement the following functions -
1. constructor
You need to create the appropriate constructor. Size for the queue passed is 10.
2. insertFront -
This function takes an element as input and insert the element at the front of queue. Insert the element only if queue is not full. And if queue is full, print -1 and return.
3. insertRear -
This function takes an element as input and insert the element at the end of queue. Insert the element only if queue is not full. And if queue is full, print -1 and return.
4. deleteFront -
This function removes an element from the front of queue. Print -1 if queue is empty.
5. deleteRear -
This function removes an element from the end of queue. Print -1 if queue is empty.
6. getFront -
Returns the element which is at front of the queue. Return -1 if queue is empty.
7. getRear -
Returns the element which is at end of the queue. Return -1 if queue is empty.



#include<iostream>
using namespace std;

#include "Solution.h"

// Driver program to test above function
int main()
{
    Deque dq(10);
    int choice,input;
    while(true) {
        cin >> choice;
        switch (choice) {
            case 1:
                cin >> input;
                dq.insertFront(input);
                break;
            case 2:
                cin >> input;
                dq.insertRear(input);
                break;
            case 3:
                dq.deleteFront();
                break;
            case 4:
                dq.deleteRear();
                break;
            case 5:
                cout << dq.getFront() << "\n";
                break;
            case 6:
                cout << dq.getRear() << "\n";
                break;
            default:
                return 0;
        }
    }

    return 0;
}
#define MAX_size 100
class Deque

{

int  array[MAX_size];

int  front;

int  rear;

int  size;

public :

Deque(int size) {

front = -1;

rear = -1;

this->size = size;

  }


    // Operations on Deque
    void insertFront(int key)
        {
        if (isFull())  {

cout << "-1" << endl;

return;

    }



    // If queue is initially empty,set front=rear=0; start of deque

if (front == -1)  {

front = 0;

rear = 0;

    }

else if (front == 0)              // front is first position of queue

front = size - 1 ;

else // decrement front 1 position

front = front-1;
array[front] = key ;
}



    void insertRear(int key)
    {
        if (isFull()) {

cout << " -1 " << endl;

return;

    }



    //  If queue is initially empty,set front=rear=0; start of deque

if (front == -1) {

front = 0;

rear = 0;

    }

else if (rear == size-1)               // rear is at last position of queue

rear = 0;

else                            // increment rear by 1 position

rear = rear+1;
array[rear] = key ;
}



    void deleteFront()
    {
        if (isEmpty())

   {

cout << "-1" << endl;

return ;

    }



 if (front == rear)

    {

front = -1;

rear = -1;

    }

else

        // back to initial position

if (front == size -1)

front = 0;



else // remove current front value from Deque;increment front by 1

front = front+1;

}




    void deleteRear()
    {
        if (isEmpty())

    {

cout << "-1" << endl ;

return ;

    }

if (front == rear)

    {

front = -1;

rear = -1;

    }

else if (rear == 0)

rear = size-1;

else

rear = rear-1;

}

// retrieve front element of Deque


    int getFront()
        {
    // If deque is empty, then returns
    // garbage value

        if (isEmpty())   {



return -1 ;

    }

return array[front];

}




    int getRear()
        {
    // If deque is empty, then returns
    // garbage value
    
        if(isEmpty() || rear < 0)  {


return -1;
    }

return array[rear];
}




    bool isEmpty()
        {
    return (front == -1);
         }

    bool  isFull(){

return ((front == 0 && rear == size-1)||front == rear+1);
    }



};
