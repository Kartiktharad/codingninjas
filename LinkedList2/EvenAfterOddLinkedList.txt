Arrange elements in a given Linked List such that, all even numbers are placed after odd numbers. Respective order of elements should remain same.
Note: Input and Output has already managed for you. You don't need to print the elements, instead return the head of updated LL.
Input format:
Linked list elements (separated by space and terminated by -1)
Output format:
Print the elements of updated Linked list.
Sample Input 1 :
1 4 5 2 -1
Sample Output 1 :
1 5 4 2
Sample Input 2 :
1 11 3 6 8 0 9 -1
Sample Output 2 :
1 11 3 9 6 8 0



#include <iostream>
class node{
public:
    int data;
    node * next;
    node(int data){
        this->data=data;
        this->next=NULL;
    }
};

using namespace std;
#include "solution.h"
node* takeinput(){
    int data;
    cin>>data;
    node* head=NULL,*tail=NULL;
    while(data!=-1){
        node *newnode=new node(data);
        if(head==NULL)                  {
            head=newnode;
            tail=newnode;
        }
        else{
            tail->next=newnode;
            tail=newnode;
        }
        cin>>data;
    }
    return head;
}
void print(node *head)
{
    node*temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}
int main()
{
    node*head=takeinput();
    head=arrange_LinkedList(head);
    print(head);
    return 0;
}

node* arrange_LinkedList(node* head)
{
   if(head==NULL || head->next==NULL)
       return head;
   node *current=head;
   node *evenHead=NULL;
   node *oddHead=NULL;
   node *evenTail=NULL;
   node *oddTail=NULL;
		while(current!=NULL)
		{

			if(current->data%2==0)
			{
				if(evenHead==NULL)
				{
					evenHead=current;
                        evenTail=current;
				}
				else
				{
					evenTail->next=current;
					evenTail=current;
				}
			}
			else
			{
				if(oddHead==NULL)
				{
					oddHead=current;
                        oddTail=current;
				}
				else
				{
					oddTail->next=current;
					oddTail=current;
				}
			}
			current=current->next;
		}
     if(oddHead==NULL){
        return evenHead;
                             }
            if(evenHead==NULL){
        return oddHead;
                             }
		oddTail->next=evenHead;
		evenTail->next=NULL;
		return oddHead;

}

// ALGO :-
//     1. make a temp variable assigned to head
//     2. make 4 nodes like headOdd, headEven, tailOdd, tailEven
//     3. make a while loop with condition while temp!=NULL
//     4. Check for node even/odd nature and then keep linking
//     5. put tailOdd -> next = HeadEven but check that headEven shouldnt be null coz
//             it might be possible that there are no even nodes present. Similarly
//             it might be possible that there might be no odd nodes in the LL
//     6. return headOdd (shouldn't be NULL) else return headEven
