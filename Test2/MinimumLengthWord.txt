Given a string S (that can contain multiple words), you need to find the word which has minimum length.
Note : If multiple words are of same length, then answer will be first minimum length word in the string.
Words are seperated by single space only.
Input Format :
String S
Output Format :
Minimum length word
Constraints :
1 <= Length of String S <= 10^5
Sample Input 1 :
this is test string
Sample Output 1 :
is
Sample Input 2 :
abc de ghihjk a uvw h j
Sample Output 2 :
a



#include<iostream>
#include "solution.h"
using namespace std;


int main(){
  char ch[10000], output[10000];
  cin.getline(ch, 10000);
  minLengthWord(ch, output);
  cout << output << endl;
}

/* input - Input String
*  output - Save the result in the output array (passed as argument). You donâ€™t have to
*  print or return the result
*/
#include<cstring>
void minLengthWord(char input[], char output[]){

 char words[100][100];
    int i = 0, j = 0, k, length;
    for(k=0; input[k]!='\0'; k++){

        //Here, i represents row and j represents column of two-dimensional array words
        if(input[k] != ' ' && input[k] != '\0'){
            words[i][j++] = input[k];
        }
        else{
            words[i][j] = '\0';
            //Increment row count to store new word
            i++;
            //Set column count to 0
            j = 0;
        }
    }
 length = i + 1;
   strcpy(output, words[0]);
       for(k = 0; k < length; k++){

        //If length of small is greater than any word present in the string
        //Store value of word into small
        if(strlen(output) > strlen(words[k])){
            strcpy(output, words[k]);
        }

}
}
