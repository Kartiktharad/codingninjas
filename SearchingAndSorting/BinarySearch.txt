Given a sorted integer array (in ascending order) and an element x. You need to search this element x in the given input array using binary search. Return the index of element in the input.
Indexing starts from 0.
Return -1 if x is not present in the input array.
Input format :
Line 1 : Integer N, Array Size
Line 2 : Array elements (separated by space)
Line 3 : Element to be searched (i.e. x)
Output Format :
Index
Constraints :
1 <= N <= 10^6
Sample Input 1:
7
1 3 7 9 11 12 45
3
Sample Output 1:
1
Sample Input 2:
7
1 2 3 4 5 6 7
9
Sample Output 2:
-1


#include <iostream>
#include "solution.h"
using namespace std;

int main() {

	int size,val;
	cin>>size;
	int *input=new int[1+size];

	for(int i=0;i<size;i++)
		cin>>input[i];

	cin>>val;
	cout<<BinarySearch(input,size,val);
	return 0;
}
int BinarySearch(int arr[], int n, int val){
	int found=1,lb=0,ub=n-1,i,j=-1;
    while(found)
    {
        int mid=(lb+ub)/2;
        if(arr[mid]>val)
            ub=mid-1;
        else if(arr[mid]<val)
            lb=mid+1;
        else
        { found=0; i=mid;}
    }
    if(found==0)
    return i;
    else
        return j;
}
