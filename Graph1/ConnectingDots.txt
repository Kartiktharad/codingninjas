Gary has a board of size NxM. Each cell in the board is a coloured dot. There exist only 26 colours denoted by uppercase Latin characters (i.e. A,B,...,Z). Now Gary is getting bore and wants to play a game. The key of this game is to find a cycle that contain dots of same colour. Formally, we call a sequence of dots d1, d2, ..., dk a cycle if and only if it meets the following condition:
1. These k dots are different: if i ≠ j then di is different from dj.
2. k is at least 4.
3. All dots belong to the same colour.
4. For all 1 ≤ i ≤ k - 1: di and di + 1 are adjacent. Also, dk and d1 should also be adjacent. Cells x and y are called adjacent if they share an edge.
Since Gary is colour blind, he wants your help. Your task is to determine if there exists a cycle on the board.
Assume input to be 0-indexed based.
Input Format :
Line 1 : Two integers N and M, the number of rows and columns of the board
Next N lines : a string consisting of M characters, expressing colors of dots in each line. Each character is an uppercase Latin letter.
Output Format :
Return 1 if there is a cycle else return 0
Constraints :
2 ≤ N, M ≤ 50
Sample Input :
3 4
AAAA
ABCA
AAAA
Sample Output :
1


int backtrack(char board[][MAXN], int N, int M, int i, int j, int k, bool** visited, int si, int sj, int previ, int prevj)
{
    if (i < 0 || j < 0 || i >= N || j >=M || visited[i][j] == true || board[previ][prevj] != board[i][j])
        return 0;
    if ( i == si && j == sj && k != 1 )
    {
        if (k >= 4)
            return 1;
        else
            return 0;
    }
    if (k != 1)
        visited[i][j] = true;
    int uld = backtrack(board, N, M, i-1, j-1, k+1, visited, si, sj, i, j);
    int u = backtrack(board, N, M, i-1, j, k+1, visited, si, sj, i, j);
    int urd = backtrack(board, N, M, i-1, j+1, k+1, visited, si, sj, i, j);
    int left = backtrack(board, N, M, i, j-1, k+1, visited, si, sj, i, j);
    int right = backtrack(board, N, M, i, j+1, k+1, visited, si, sj, i, j);
    int dld = backtrack(board, N, M, i+1, j-1, k+1, visited, si, sj, i, j);
    int d = backtrack(board, N, M, i+1, j, k+1, visited, si, sj, i, j);
    int drd = backtrack(board, N, M, i+1, j+1, k+1, visited, si, sj, i, j);
    if ((uld || u || urd || left || right || dld || d || drd) != 1)
    {
        visited[i][j] = false;
        return 0;
    }
    else
        return 1;
}


int solve(char board[][MAXN],int n, int m)
{
	// Write your code here.
     bool** visited = new bool*[n];
    for (int i=0; i<n; i++)
    {
        visited[i] = new bool[m];
    }
    for (int i=0; i<n; i++)
    {
        for(int j=0; j< m; j++)
            visited[i][j] = false;
    }
    int flag = 0;
    for (int i=0; i< n; i++)
    {
        for (int j=0; j< m; j++)
        {
            flag = backtrack(board, n, m, i, j, 1, visited, i, j, i, j);
            if (flag == 1)
                break;
        }
    }
    for (int i=0; i< n; i++)
    {
        delete[] visited[i];
    }
    delete[] visited;
    return flag;
}


#include<bits/stdc++.h>
using namespace std;
#define MAXN 51
#include "solution.h"
int main()
{
	int N,M,i;
	char board[MAXN][MAXN];
	cin>>N>>M;
	for(i = 0;i < N; i++){
		cin>>board[i];
	}
	cout<<solve(board,N,M)<<endl;
}
